/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "esp.h"
//#include "tb6612.h"
//#include "mpu6050.h"
#include <delay.h>
#include <math.h>

#include "ins.h"
#include "MPU6050DMP/inv_mpu.h"
#include "debug_usart.h"
#include "i2c_sim.h"
#include "keyboard.h"

//#include "BLE/atk_mw579.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/*
MPU6050_HandleTypeDef MPU6050_hand; //MPU6050 句柄结构体
AttitudeEstimator attitudeEstimator;//MPU6050 姿态解算结构体
EulerAngle eulerAngle;//MPU6050 当前欧拉角*/

//从机ID
const int SLAVE_ID = 1;
I2C_Sim_HandleTypeDef i2cs1;

//设置为0代表禁用报警功能
//设定的姿态角阈值
float pitch_th = 0;
float roll_th = 0;
float yaw_th = 0;
//速度阈值
float v_th = 0;
//三轴合角速度阈值
float g_th = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void MasterESPDataHandler(uint8_t conn_id, uint8_t* data, uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
asm(".global _printf_float");
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  i2cs1.Timeout = 100;
  i2cs1.SCL_GPIOx = GPIOB;
  i2cs1.SDA_GPIOx = GPIOB;
  i2cs1.SCL_GPIO_Pin = GPIO_PIN_8;
  i2cs1.SDA_GPIO_Pin = GPIO_PIN_9;
  I2C_Sim_Init(&i2cs1);

  DelayUs_Init();
  //keyboard_init();
 //mpu6050_bridge_init(&hi2c1);
  MPU6050_DMP_Init();
  /*
  uint8_t dat = 0x00;
  while(1) {
    HAL_I2C_Mem_Write(&hi2c1, 0b00001000, 0x0D , I2C_MEMADD_SIZE_8BIT , &dat, 1 ,100);
   // mpu6050_write(0x1F, 0x0D, 1, &dat);
  }*/
  //MPU6050_DMP_Init();
  HAL_UART_Transmit(&huart3,"123",sizeof("123"),100);

  float ax,ay,az;
  HAL_UART_Transmit(&huart3,"123",sizeof("123"),100);
  for(int i = 0 ; i < 3 ; i++) {
    delay_ms(1000);
  }
  MPU6050_DMP_get_accel(&ax,&ay,&az);
  ax/=10000;
  ay/=10000;
  az/=10000;
  HAL_UART_Transmit(&huart3,"123",sizeof("123"),100);
  ins_init(ATTITUDE_MODE_QUATERNION,0,0,0,sqrtf(ax*ax+ay*ay+az*az));





  //串口调试初始化
  debug_usart_init(18,&huart3,500);
  float number[] ={0,1,2,3};
 // HAL_UART_Transmit(&huart3,(uint8_t*)number,sizeof(float)*4,100);
  //debug_usart_send(number);
  //启用TIM2中断（100Hz）用于更新姿态


  //ESP01 串口转WIFI模块初始化
  HAL_UART_Transmit(&huart3,"ESP01 initializing",sizeof("ESP01 initializing"),100);
  ESP01_Init(&huart2,0);
  HAL_UART_Transmit(&huart3,"ESP01 initialized",sizeof("ESP01 initialized"),100);
  //设置用来处理接收到的信息的回调函数
  ESP01_SetDataCallback(MasterESPDataHandler);


  HAL_TIM_Base_Start_IT(&htim2);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */





//NVIC中断服务函数

long long ct = 1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
  //TIM2定时器中断，触发频率100Hz，用于更新姿态
  if(htim->Instance==TIM2) {
    //更新当前姿态
  /*
    if(ct==0)
      ct=1;
    else if(ct==1)
      ct=2;
    else if(ct==2)
      ct=3;
    else
      ct=0;*/
    ct+=1;
    float q0,q1,q2,q3;
    float ax,ay,az,gx,gy,gz;
    float pitch,yaw,roll;
    //在大地坐标系下的三轴加速度
    float ax_g,ay_g,az_g;
    int a =  MPU6050_DMP_Get_Data_quaternion(&q0,&q1,&q2,&q3);
    MPU6050_DMP_get_accel(&ax,&ay,&az);
    ax/=10000;
    ay/=10000;
    az/=10000;
    MPU6050_DMP_get_gyro(&gx,&gy,&gz);
    //MPU6050_DMP_Get_Data_euler(&pitch,&roll,&yaw);
    pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
    roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
    yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
    ins_update_current_quaternion(q0,q1,q2,q3);
    ins_update_pos(ax,ay,az,1.0f/100);
    float posx,posy,posz;
    float vx,vy,vz;
    ins_get_position(&posx,&posy,&posz);
    ins_get_velocity(&vx,&vy,&vz);
    ins_get_acceleration_ground(&ax_g,&ay_g,&az_g);
    float data[18]={
      pitch,
      roll,
      yaw,
      ax,
      ay,
      az,
      ax_g,
      ay_g,
      az_g,
      gx,
      gy,
      gz,
      posx,
      posy,
      posz,
      vx,
      vy,
      vz
    };
    if(pitch_th!=0 && pitch>pitch_th) {
      //TODO:俯仰角超出阈值报警
    }
    if(roll_th!=0 && roll>roll_th) {
      //TODO:滚转角超出阈值报警
    }
    if(yaw_th!=0 && yaw>yaw_th) {
      //TODO:偏航角超出阈值报警
    }
    if(v_th!=0 && sqrtf(vx*vx+vy*vy+vz*vz)>v_th) {
      //TODO:速度超出阈值报警
    }
    if(g_th!=0 && sqrtf(gx*gx+gy*gy+gz*gz)>g_th) {
      //TODO:角速度超出阈值报警
    }
    //debug_usart_send(data);//发送调试数据
    //构建数据包
    uint8_t buffer[89];
    //索引0 - 4 ： 数据包头
    memcpy(buffer,">HEAD",5);
    //索引 5 - 8:：从机（下位机）ID,int
    memcpy(buffer+5,&SLAVE_ID,4);
    //索引 9 - 20: 欧拉角
    memcpy(buffer+9,&pitch,4);
    memcpy(buffer+13,&yaw,4);
    memcpy(buffer+17,&roll,4);
    //索引21 - 36 ：四元数
    memcpy(buffer+21,&q0,4);
    memcpy(buffer+25,&q1,4);
    memcpy(buffer+29,&q2,4);
    memcpy(buffer+33,&q3,4);
    //索引37 - 48 ：三轴加速度
    memcpy(buffer+37,&ax,4);
    memcpy(buffer+41,&ay,4);
    memcpy(buffer+45,&az,4);
    //索引49 - 57 ：三轴速度
    memcpy(buffer+49,&vx,4);
    memcpy(buffer+53,&vy,4);
    memcpy(buffer+57,&vz,4);
    //索引61 - 72：位置
    memcpy(buffer+61,&posx,4);
    memcpy(buffer+65,&posy,4);
    memcpy(buffer+69,&posz,4);
    //索引73 - 84：三轴角速度
    memcpy(buffer+73,&gx,4);
    memcpy(buffer+77,&gy,4);
    memcpy(buffer+81,&gz,4);
    //索引85 - 88：数据包尾
    memcpy(buffer+85,">END",4);
      if(ct%5==0)
      ESP01_SendTCPData(0,buffer,89);
  }

}
//自定义的主机的接+IPD消息处理函数
void MasterESPDataHandler(uint8_t conn_id, uint8_t* data, uint16_t len){
  //设定阈值的数据包格式：
  /*
   * >HEAD 数据包头
   * 姿态角阈值：
   * pitch_th 4bytes(float)
   * yaw_th 4bytes(float)
   * roll_th  4bytes(float)
   * 速度阈值：
   * v_th  4bytes(float)
   * 角速度阈值：
   * g_th  4bytes(float)
   */
  char* loc = strstr((char*)data,">HEAD");
  if(loc != NULL) {
    loc+=5;//指针移动到>HEAD的数据包头标记的后面
    //更新角度阈值
    memcpy(&pitch_th,loc,4);
    memcpy(&roll_th,loc+4,4);
    memcpy(&yaw_th,loc+8,4);
    memcpy(&v_th,loc+12,4);
    memcpy(&g_th,loc+16,4);
  }
  else {
    //指针解引用错误，未找到数据包头
    HAL_UART_Transmit(&huart3,"ERROR:CANNOT PARSE RECEIVED PACKET:>HEAD NOT FOUND",sizeof("ERROR:CANNOT PARSE RECEIVED PACKET:>HEAD NOT FOUND"),100);
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
